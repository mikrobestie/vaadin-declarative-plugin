{
  parserClass = 'cz.mikrobestie.idea.vaadin.declarative.lang.VaadinDesignParser'
  parserUtilClass="cz.mikrobestie.idea.vaadin.declarative.lang.VaadinDesignParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="VD"
  psiImplClassSuffix="Impl"
  psiPackage="cz.mikrobestie.idea.vaadin.declarative.psi"
  psiImplPackage="cz.mikrobestie.idea.vaadin.declarative.psi.impl"

  elementTypeHolderClass="cz.mikrobestie.idea.vaadin.declarative.psi.VDTypes"
  elementTypeClass="cz.mikrobestie.idea.vaadin.declarative.psi.VDElementType"
  tokenTypeClass="cz.mikrobestie.idea.vaadin.declarative.psi.VDTokenType"
}

Document ::= (Doctype Whitespaces)? (HtmlTag | Component)
Doctype ::= '<!DOCTYPE html>'
HtmlTag ::= '<html' Attrs? '>' Whitespaces HeadTag? BodyTag '</html>'
HeadTag ::= '<head>' MetaTag* '</head>'
MetaTag ::= '<meta' '/>'
BodyTag ::= '<body>' Whitespaces Component Whitespaces '</body>'
HtmlContent ::= (EL_OPEN VOID_TAG_NAME '/>') | (EL_OPEN PAIR_TAG_NAME '>' HtmlContent* '</' PAIR_TAG_NAME '>')
Component ::= EL_OPEN NAME Attrs? ('/>' | '>' HtmlContent '</' NAME '>')
Attrs ::= (Whitespaces Attr)+
Attr ::= LocalIdAttr | AttrWithValue | ParentAttr
LocalIdAttr ::= '_id=' ATTR_VALUE
ParentAttr ::= ':' AttrWithValue
AttrWithValue ::= NAME ('=' ATTR_VALUE)?
Whitespaces ::= (WHITE_SPACE | CRLF)*