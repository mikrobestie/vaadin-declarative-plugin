{
  parserClass = 'cz.mikrobestie.idea.vaadin.declarative.lang.VaadinDesignParser'
  parserUtilClass="cz.mikrobestie.idea.vaadin.declarative.lang.VaadinDesignParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="VD"
  psiImplClassSuffix="Impl"
  psiPackage="cz.mikrobestie.idea.vaadin.declarative.psi"
  psiImplPackage="cz.mikrobestie.idea.vaadin.declarative.psi.impl"

  elementTypeHolderClass="cz.mikrobestie.idea.vaadin.declarative.psi.VDTypes"
  elementTypeClass="cz.mikrobestie.idea.vaadin.declarative.psi.VDElementType"
  tokenTypeClass="cz.mikrobestie.idea.vaadin.declarative.psi.VDTokenType"
}

Document ::= DOCTYPE_DECL? (HtmlTag | Component)
HtmlTag ::= COMMENT* EL_LEFT TAG_HTML Attr* EL_RIGHT HeadTag? BodyTag EL_CLOSE_LEFT TAG_HTML EL_RIGHT {pin = 2}
HeadTag ::= COMMENT* EL_LEFT TAG_HEAD EL_RIGHT (MetaTag | COMMENT)* EL_CLOSE_LEFT TAG_HEAD EL_RIGHT {pin = 2}
MetaTag ::= COMMENT* EL_LEFT TAG_META Attr+ EL_CLOSE_RIGHT {pin = 2}
BodyTag ::= COMMENT* EL_LEFT TAG_BODY EL_RIGHT COMMENT* Component COMMENT* EL_CLOSE_LEFT TAG_BODY EL_RIGHT {pin = 2}

Component ::= EL_LEFT COMPONENT_NAME Attr* (EL_CLOSE_RIGHT | EL_RIGHT (COMMENT | TEXT | Component)* ComponentClose) {
//    pin             = 2
//    recoverWhile    = "ComponentRecover"
    mixin           = "cz.mikrobestie.idea.vaadin.declarative.psi.impl.VDComponentHelperImpl"
    implements      = "cz.mikrobestie.idea.vaadin.declarative.psi.VDComponentHelper"
    methods         = [getKey getValue getName setName getNameIdentifier]
}
//private ComponentRecover ::= !(EL_LEFT | TAG_BODY_CLOSE)
private ComponentClose ::= EL_CLOSE_LEFT COMPONENT_NAME EL_RIGHT

Attr ::= ATTR_NAME (EQ ATTR_VALUE)? {
    mixin        = "cz.mikrobestie.idea.vaadin.declarative.psi.impl.VDAttrHelperImpl"
    implements   = "cz.mikrobestie.idea.vaadin.declarative.psi.VDAttrHelper"
}